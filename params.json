{"name":"Rally","tagline":"a simple wrapper around Google's volley and your Android network structure.","body":"# rally\r\n\r\n*rally* is a simple wrapper around Google's volley and your Android network structure. Goal is to reduce the amount of boilerplate code.\r\n\r\n## Setup\r\n\r\n**With [gradle](http://tools.android.com/tech-docs/new-build-system):**\r\n\r\n* Clone the project under `/libraries` folder of your root project.\r\n* Add these lines to your `settings.gradle`:\r\n\r\n```\r\ninclude 'rally-lib'\r\nproject (':rally-lib').projectDir = new File('libraries/rally/rally-lib')\r\ninclude 'volley'\r\nproject (':volley').projectDir = new File('libraries/rally/libraries/volley')\r\n```\r\n\r\n* To declare the dependencies, add these lines to your `build.gradle`:\r\n\r\n```\r\ndependencies {\r\n...\r\n\r\ncompile project(':rally-lib')\r\ncompile project(':volley')\r\n\r\n...\r\n}\r\n```\r\n\r\nThat's all!\r\n\r\n## Usage\r\n\r\nHere's how I use rally, but you can easily integrate it in your own way too!\r\n\r\n### What do you need?\r\n\r\n* Extend your Android Application class to `CoreBaseApplication` for declaring and initialising `volley` instances. (This could be done in another place too, but it's just easier in here)\r\n\r\n* Create a `BaseRequest` class that extends `CoreBaseRequest`.\r\n(Don't forget! This whole library is all about more modular and reusable network structure.)\r\n\r\nHere is a simple `BaseRequest` class:\r\n\r\n```\r\npublic abstract class BaseRequest extends CoreBaseRequest {\r\n\r\n    @Override\r\n    protected String baseUrl() {\r\n        return <YOUR_BASE_URL>;\r\n    }\r\n\r\n    /**\r\n     * @return content type of the request\r\n     */\r\n    protected String contentType() {\r\n        return httpMethod() == Request.Method.GET ? \"\" : \"application/json\";\r\n    }\r\n\r\n    /**\r\n     * @return key value map of headers required for the request\r\n     */\r\n    protected Map<String, String> getHeaders() {\r\n        // Add your headers here, if you need\r\n    }\r\n}\r\n```\r\n\r\n\r\nAnd here is a simple *POST* request:\r\n\r\n```\r\npublic class CreateUserRequest extends BaseRequest {\r\n\r\n    private final <YourUserClass> mUser;\r\n\r\n    public CreateUserRequest(Context context, CustomUser user) {\r\n        super(context);\r\n        mUser = user;\r\n    }\r\n\r\n    @Override\r\n    protected int httpMethod() {\r\n        return Request.Method.POST;\r\n    }\r\n\r\n    @Override\r\n    protected String path() {\r\n        return <END_POINT_OF_THE_ACTION>\";\r\n    }\r\n\r\n    @Override\r\n    protected Class responseClass() {\r\n        return <MODEL_CLASS_OF_YOUR_RESPONSE>;\r\n    }\r\n\r\n    @Override\r\n    protected String body() {\r\n        return new GsonBuilder().create().toJson(mUser);\r\n    }\r\n}\r\n\r\n```\r\n\r\n***\r\n\r\n### How to call?\r\n\r\n```\r\n<APPLICATION_CLASS>.getInstance().getRequestQueue().add(new CreateUserRequest(getActivity(), mUser) {\r\n                @Override\r\n                protected void onSuccess(Object response) {\r\n                    super.onSuccess(response);\r\n                    UserInfo userInfo = (UserInfo) response;\r\n\r\n                    // handle your response here\r\n                }\r\n\r\n                @Override\r\n                protected void onError(VolleyError error) {\r\n                    super.onError(error);\r\n\r\n                    // handle your error here\r\n                }\r\n            }.create());\r\n```\r\n\r\n`<MODEL_CLASS_OF_YOUR_RESPONSE>` is a response class to retrieve the network response, and `<YourUserClass>` is the request class to send the request to the server. Simple.\r\nHence you don't have to worry anything about parsing, `gson` handles it in an elegant way.\r\n\r\n***\r\n\r\n### Other useful methods\r\n* `CoreVolleyUtil.getMethodName`\r\n\r\nReturns the `String` value of the HTTP Methods. It might be necessary if you use HTTP verbs as parameters,\r\n(i.e Authorising your calls, since `volley` has `int` implementation of them.)\r\n\r\nTo-do\r\n---\r\n* tests\r\n* gzip support\r\n* support for content-types other than application/json\r\n\r\nLicense\r\n---\r\n\r\n*rally* is available under Apache License Version 2.0. See the [LICENSE.md](LICENSE.md) file for more info.\r\n\r\nGet In Touch\r\n---\r\n\r\nIf you have questions, feel free to post an issue here on GitHub or just email us at [rally@zeplin.io](mailto:rally@zeplin.io).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}